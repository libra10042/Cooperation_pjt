//--------------------------- calendar ---------------------------------
document.addEventListener("DOMContentLoaded", function () {
  buildCalendar();
});

var today = new Date(); // @param 전역 변수, 오늘 날짜 / 내 컴퓨터 로컬을 기준으로 today에 Date 객체를 넣어줌
var date = new Date(); // @param 전역 변수, today의 Date를 세어주는 역할

function prevCalendar() {
  this.today = new Date(
    today.getFullYear(),
    today.getMonth() - 1,
    today.getDate()
  );
  buildCalendar(); // @param 전월 캘린더 출력 요청
}

function nextCalendar() {
  this.today = new Date(
    today.getFullYear(),
    today.getMonth() + 1,
    today.getDate()
  );
  buildCalendar(); // @param 명월 캘린더 출력 요청
}

function buildCalendar() {
  let doMonth = new Date(today.getFullYear(), today.getMonth(), 1);
  let lastDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

  let tbCalendar = document.querySelector(".scriptCalendar > tbody");

  document.getElementById("calYear").innerText = today.getFullYear(); // @param YYYY월
  document.getElementById("calMonth").innerText = autoLeftPad(
    today.getMonth() + 1,
    2
  ); // @param MM월

  while (tbCalendar.rows.length > 0) {
    tbCalendar.deleteRow(tbCalendar.rows.length - 1);
  }

  let row = tbCalendar.insertRow();

  let dom = 1;

  let daysLength =
    Math.ceil((doMonth.getDay() + lastDate.getDate()) / 7) * 7 -
    doMonth.getDay();

  for (let day = 1 - doMonth.getDay(); daysLength >= day; day++) {
    let column = row.insertCell();

    if (Math.sign(day) == 1 && lastDate.getDate() >= day) {
      column.innerText = autoLeftPad(day, 2);

      if (dom % 7 == 1) {
        column.style.color = "#FF8400";
      }

      if (dom % 7 == 0) {
        column.style.color = "blue";
        row = tbCalendar.insertRow(); // @param 토요일이 지나면 다시 가로 행을 한줄 추가한다.
      }
    } else {
      let exceptDay = new Date(doMonth.getFullYear(), doMonth.getMonth(), day);
      column.innerText = autoLeftPad(exceptDay.getDate(), 2);
      column.style.color = "#A9A9A9";
    }

    if (today.getFullYear() == date.getFullYear()) {
      if (today.getMonth() == date.getMonth()) {
        if (date.getDate() > day && Math.sign(day) == 1) {
          column.style.backgroundColor = "#eee";
        } else if (date.getDate() < day && lastDate.getDate() >= day) {
          column.style.backgroundColor = "#FFFFFF";
          column.style.cursor = "pointer";
          column.onclick = function () {
            calendarChoiceDay(this);
          };
        } else if (date.getDate() == day) {
          column.style.backgroundColor = "#fff3e7";
          column.style.cursor = "pointer";
          column.onclick = function () {
            calendarChoiceDay(this);
          };
        }
      } else if (today.getMonth() < date.getMonth()) {
        if (Math.sign(day) == 1 && day <= lastDate.getDate()) {
          column.style.backgroundColor = "#eee";
        }
      } else {
        if (Math.sign(day) == 1 && day <= lastDate.getDate()) {
          column.style.backgroundColor = "#FFFFFF";
          column.style.cursor = "pointer";
          column.onclick = function () {
            calendarChoiceDay(this);
          };
        }
      }
    } else if (today.getFullYear() < date.getFullYear()) {
      if (Math.sign(day) == 1 && day <= lastDate.getDate()) {
        column.style.backgroundColor = "#eee";
      }
    } else {
      if (Math.sign(day) == 1 && day <= lastDate.getDate()) {
        column.style.backgroundColor = "#FFFFFF";
        column.style.cursor = "pointer";
        column.onclick = function () {
          calendarChoiceDay(this);
        };
      }
    }

    dom++;
  }
}

function calendarChoiceDay(column) {
  if (document.getElementsByClassName("choiceDay")[0]) {
    document.getElementsByClassName("choiceDay")[0].style.backgroundColor =
      "#FFFFFF";
    document
      .getElementsByClassName("choiceDay")[0]
      .classList.remove("choiceDay");
  }

  column.style.backgroundColor = "#9ea2c7";

  column.classList.add("choiceDay");
}

function autoLeftPad(num, digit) {
  if (String(num).length < digit) {
    num = new Array(digit - String(num).length + 1).join("0") + num;
  }
  return num;
}
// ------------------------- tab메뉴 ----------------------------
$().ready(function () {
  // 탭메뉴
  $(".roadMapNav li").click(function () {
    var idx = $(this).index();
    $(".roadMapNav li").removeClass("active");
    $(this).addClass("active");
    $(".roadMapCont > div").hide();
    $(".roadMapCont > div").eq(idx).show();
  });
});



// ---------------------------popup메뉴-------------------------------
//
//$().ready(function(){
//
//    // 팝업 닫기
//    $(".pop dt a, .darkBack").click(function(){
//        $(".pop").removeClass("show");
//        $(".darkBack").hide();
//    });
//
//    // 팝업닫기
//    $(".popupOK, .darkBack").click(function(){
//        $(".popup").hide();
//        $(".popupM").removeClass("show");
//        $(".popupP").hide();
//        $(".darkBack").hide();
//        
//     // 팝업열기
//        $(".stateForm dt").click(function(){
//            $(".workAddPopup").show();
//            $(".darkBack").show();
//        });
//        
//        $(".workAddBtn").click(function(){
//            $(".workAddPopup").show();
//            $(".darkBack").show();
//        });
//        
//    });
// 
//    
//});
//
//
//$().ready(function(){
//    // 탭메뉴
//    $(".todoNav li").click(function(){
//        var idx = $(this).index();
//        $(".todoNav li").removeClass("active");
//        $(this).addClass("active");
//        $(".todoCont > li").removeClass("active");
//        $(".todoCont > li").eq(idx).addClass("active");
//    });
//
//    // 팝업열기
//    $(".todoContList li a, .departTodo dd li a").click(function(){
//        $(".workPopup").show();
//        $(".darkBack").show();
//    });
//    
//    $(".workAddBtn").click(function(){
//        $(".workAddPopup").show();
//        $(".darkBack").show();
//    });
//
//});



$().ready(function(){
    // 탭메뉴
    $(".todoNav li").click(function(){
        var idx = $(this).index();
        $(".todoNav li").removeClass("active");
        $(this).addClass("active");
        $(".todoCont > li").removeClass("active");
        $(".todoCont > li").eq(idx).addClass("active");
    });

    // 팝업열기
    $(".todoContList li a, .departTodo dd li a").click(function(){
    	
    	console.log("팝업열기");
        $(".workAddPopup").show();
        $(".darkBack").show();
    });
    
    $(".workAddBtn").click(function(){
        $(".workAddPopup").show();
    });

    
    $("#messRoad").click(function(){
    	console.log("InfoPopup");
    	$(".roadmapInfoPopup").show();
    	
    })
    
    $('.projectBtn').click(function(){
    	console.log("projectAddPopup");
    	$(".projectAddPopup").show();
    	$(".darkBack").show();
    	
    })
    
});

/* ------------ @param 프로젝트 생성 fileuplaod ---------------*/
var regex = new RegExp("(.*?)\.(exe|sh|zip|alz)$");
var maxSize = 5242880; //5MB

function checkExtension(fileName, fileSize){
	if(fileSize >= maxSize){
		alert("파일 사이즈 초과");
		return false;
	}
	
	if(regex.test(fileName)){
		alert("해당 종류의 파일은 업로드할 수 없습니다.");
		return false;
	}
	return true;
}



$("#uploadBtn").on("click", function(e){
	var formData = new FormData();
		
	var inputFile = $("input[name='uploadFile']");
	var files = inputFile[0].files;
		
	console.log(files);
		
	//add filedate to formdata
	for(var i=0; i< files.length; i++){
		formData.append("uploadFile", files[i]);
		}

		$.ajax({
			url : '/uploadAjaxAction.do',
				processData : false,
				contentType : false,
				type :'POST',
				success : function(result){
					alert("Uploaded");
				}
		});
		
	});



